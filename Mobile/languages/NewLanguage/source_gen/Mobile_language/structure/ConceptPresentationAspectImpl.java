package Mobile_language.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Display;
  private ConceptPresentation props_DisplayType;
  private ConceptPresentation props_InputFeature;
  private ConceptPresentation props_InputFeatureReference;
  private ConceptPresentation props_Mobile;
  private ConceptPresentation props_OS;
  private ConceptPresentation props_OSType;
  private ConceptPresentation props_OutputField;
  private ConceptPresentation props_RAM;
  private ConceptPresentation props_RAMType;
  private ConceptPresentation props_mobileFeatures;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Display:
        if (props_Display == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Display = cpb.create();
        }
        return props_Display;
      case LanguageConceptSwitch.DisplayType:
        if (props_DisplayType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DisplayType = cpb.create();
        }
        return props_DisplayType;
      case LanguageConceptSwitch.InputFeature:
        if (props_InputFeature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InputFeature = cpb.create();
        }
        return props_InputFeature;
      case LanguageConceptSwitch.InputFeatureReference:
        if (props_InputFeatureReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xc5bf149de8404863L, 0x943d431a54c8f817L, 0x39bc4ab4c2f215d2L, 0x39bc4ab4c2f215eeL, "Feature", "", "");
          props_InputFeatureReference = cpb.create();
        }
        return props_InputFeatureReference;
      case LanguageConceptSwitch.Mobile:
        if (props_Mobile == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Mobile = cpb.create();
        }
        return props_Mobile;
      case LanguageConceptSwitch.OS:
        if (props_OS == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_OS = cpb.create();
        }
        return props_OS;
      case LanguageConceptSwitch.OSType:
        if (props_OSType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_OSType = cpb.create();
        }
        return props_OSType;
      case LanguageConceptSwitch.OutputField:
        if (props_OutputField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OutputField");
          props_OutputField = cpb.create();
        }
        return props_OutputField;
      case LanguageConceptSwitch.RAM:
        if (props_RAM == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RAM");
          props_RAM = cpb.create();
        }
        return props_RAM;
      case LanguageConceptSwitch.RAMType:
        if (props_RAMType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RAMType = cpb.create();
        }
        return props_RAMType;
      case LanguageConceptSwitch.mobileFeatures:
        if (props_mobileFeatures == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mobileFeatures");
          props_mobileFeatures = cpb.create();
        }
        return props_mobileFeatures;
    }
    return null;
  }
}
